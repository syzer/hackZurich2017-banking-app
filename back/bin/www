#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http')
const debug = require('debug')('net.migros.monitor:server')
const displayRoutes = require('express-routemap')
const app = require('../app')
const { port, ip } = require('../config')

/**
 * Get port from environment and store in Express.
 */
app.set('port', port)
app.set('ip', ip)

/**
 * Create HTTP server.
 */
const server = http.createServer(app)

// le socket connection
const io = require('socket.io')(server)

// register all sockets api's
const { socketHandler: payments } = require('../routes/payments')
const { socketHandler: conversations } = require('../routes/conversations')
payments(io)
conversations(io)

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, ip)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Event listener for HTTP server "error" event.
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)

  displayRoutes(app)

  if (app.get('env') === 'development') {
    console.log(`http://localhost:${port}`)
  }
}
