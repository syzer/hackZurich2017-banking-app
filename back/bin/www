#!/usr/bin/env node

const promisify = require('util.promisify')
const fs = require('fs')
const writeFileAsync = promisify(fs.writeFile)
const appendFileAsync = promisify(fs.appendFile)
const app = require('../app')
const debug = require('debug')('back:server')
const http = require('http')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '4000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)
const io = require('socket.io')(server)
// const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  console.log('Listening on ' + bind)
}

io.on('connection', socket => {
  socket.emit('news', { hello: 'world' })
  socket.on('speech', data => {
    console.log(data)

    writeFileAsync('../data/file.webm', data.blob.toString())
      .then(console.log)
      .catch(console.error)
  })

  socket.on('text', (data) => {
    console.log('text', data)
    appendFileAsync('../data/user.conversations.json', '\n' + JSON.stringify(data))
      .then(console.log)
      .catch(console.error)
  })
})

module.exports = io
